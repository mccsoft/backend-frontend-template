//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './ProductClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type DeleteProductQueryParameters = {
  id?: number | undefined ;
}

export type SearchProductQueryParameters = {
  search?: string | null | undefined ;
  productType?: Types.ProductType | null | undefined ;
  lastStockUpdatedAt?: Date | null | undefined ;
  offset?: number | null | undefined ;
  limit?: number | null | undefined ;
  sortBy?: string | null | undefined ;
  sortOrder?: Types.SortOrder | undefined ;
}

export type PatchProductQueryParameters = {
  id: number ;
}

export type GetProductQueryParameters = {
  id: number ;
}

export function createUrl(): string {
  let url_ = getBaseUrl() + "/api/products";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createMutationKey(): MutationKey {
  return trimArrayEnd([
      'ProductClient',
      'create',
    ]);
}

export function useCreateMutation<TContext>(options?: Omit<UseMutationOptions<Types.ProductDto, unknown, Types.CreateProductDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.ProductDto, unknown, Types.CreateProductDto, TContext> {
  const key = createMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (dto: Types.CreateProductDto) => Client.create(dto),
    mutationKey: key,
  });
}
  
export function deleteUrl(id?: number | undefined): string {
  let url_ = getBaseUrl() + "/api/products?";
if (id === null)
    throw new Error("The parameter 'id' cannot be null.");
else if (id !== undefined)
    url_ += "id=" + encodeURIComponent("" + id) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function deleteMutationKey(id?: number | undefined): MutationKey {
  return trimArrayEnd([
      'ProductClient',
      'delete',
      id as any,
    ]);
}

export function useDeleteMutation<TContext>(id?: number | undefined, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = deleteMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.delete_(id),
    mutationKey: key,
  });
}
  
type Delete__MutationParameters = DeleteProductQueryParameters

export function useDeleteMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, Delete__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: DeleteProductQueryParameters}): UseMutationResult<void, unknown, Delete__MutationParameters, TContext> {
  const key = deleteMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Delete__MutationParameters) => Client.delete_(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}
  
export function searchUrl(search?: string | null | undefined, productType?: Types.ProductType | null | undefined, lastStockUpdatedAt?: Date | null | undefined, offset?: number | null | undefined, limit?: number | null | undefined, sortBy?: string | null | undefined, sortOrder?: Types.SortOrder | undefined): string {
  let url_ = getBaseUrl() + "/api/products?";
if (search !== undefined && search !== null)
    url_ += "Search=" + encodeURIComponent("" + search) + "&";
if (productType !== undefined && productType !== null)
    url_ += "ProductType=" + encodeURIComponent("" + productType) + "&";
if (lastStockUpdatedAt !== undefined && lastStockUpdatedAt !== null)
    url_ += "LastStockUpdatedAt=" + encodeURIComponent(lastStockUpdatedAt ? "" + Types.formatDate(lastStockUpdatedAt) : "") + "&";
if (offset !== undefined && offset !== null)
    url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
if (limit !== undefined && limit !== null)
    url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
if (sortBy !== undefined && sortBy !== null)
    url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
if (sortOrder === null)
    throw new Error("The parameter 'sortOrder' cannot be null.");
else if (sortOrder !== undefined)
    url_ += "SortOrder=" + encodeURIComponent("" + sortOrder) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let searchDefaultOptions: Omit<UseQueryOptions<Types.PagedResultOfProductListItemDto, unknown, Types.PagedResultOfProductListItemDto>, 'queryKey'> = {
  queryFn: __search,
};
export function getSearchDefaultOptions() {
  return searchDefaultOptions;
};
export function setSearchDefaultOptions(options: typeof searchDefaultOptions) {
  searchDefaultOptions = options;
}

export function searchQueryKey(dto: SearchProductQueryParameters): QueryKey;
export function searchQueryKey(search?: string | null | undefined, productType?: Types.ProductType | null | undefined, lastStockUpdatedAt?: Date | null | undefined, offset?: number | null | undefined, limit?: number | null | undefined, sortBy?: string | null | undefined, sortOrder?: Types.SortOrder | undefined): QueryKey;
export function searchQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { search, productType, lastStockUpdatedAt, offset, limit, sortBy, sortOrder,  } = params[0] as SearchProductQueryParameters;

    return trimArrayEnd([
        'ProductClient',
        'search',
        search as any,
        productType as any,
        lastStockUpdatedAt as any,
        offset as any,
        limit as any,
        sortBy as any,
        sortOrder as any,
      ]);
  } else {
    return trimArrayEnd([
        'ProductClient',
        'search',
        ...params
      ]);
  }
}
function __search(context: QueryFunctionContext) {
  return Client.search(
      context.queryKey[2] as string | null | undefined,       context.queryKey[3] as Types.ProductType | null | undefined,       context.queryKey[4] as Date | null | undefined,       context.queryKey[5] as number | null | undefined,       context.queryKey[6] as number | null | undefined,       context.queryKey[7] as string | null | undefined,       context.queryKey[8] as Types.SortOrder | undefined    );
}

export function useSearchQuery<TSelectData = Types.PagedResultOfProductListItemDto, TError = unknown>(dto: SearchProductQueryParameters, options?: Omit<UseQueryOptions<Types.PagedResultOfProductListItemDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * @param search (optional) 
 * @param productType (optional) 
 * @param lastStockUpdatedAt (optional) 
 * @param offset (optional) Offset of list.
 * @param limit (optional) Number of requested records.
 * @param sortBy (optional) Field name for sorting in DB.
 * @param sortOrder (optional) Sort direction. Ascending or Descending.
 */
export function useSearchQuery<TSelectData = Types.PagedResultOfProductListItemDto, TError = unknown>(search?: string | null | undefined, productType?: Types.ProductType | null | undefined, lastStockUpdatedAt?: Date | null | undefined, offset?: number | null | undefined, limit?: number | null | undefined, sortBy?: string | null | undefined, sortOrder?: Types.SortOrder | undefined, options?: Omit<UseQueryOptions<Types.PagedResultOfProductListItemDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useSearchQuery<TSelectData = Types.PagedResultOfProductListItemDto, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.PagedResultOfProductListItemDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined;
  let search: any = undefined;
  let productType: any = undefined;
  let lastStockUpdatedAt: any = undefined;
  let offset: any = undefined;
  let limit: any = undefined;
  let sortBy: any = undefined;
  let sortOrder: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ search, productType, lastStockUpdatedAt, offset, limit, sortBy, sortOrder,  } = params[0] as SearchProductQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [search, productType, lastStockUpdatedAt, offset, limit, sortBy, sortOrder, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  if (axiosConfig) {
    options = options ?? { } as any;
    options!.meta = { ...options!.meta, axiosConfig };
  }

  return useQuery<Types.PagedResultOfProductListItemDto, TError, TSelectData>({
    queryFn: __search,
    queryKey: searchQueryKey(search, productType, lastStockUpdatedAt, offset, limit, sortBy, sortOrder),
    ...searchDefaultOptions as unknown as Omit<UseQueryOptions<Types.PagedResultOfProductListItemDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @param search (optional) 
 * @param productType (optional) 
 * @param lastStockUpdatedAt (optional) 
 * @param offset (optional) Offset of list.
 * @param limit (optional) Number of requested records.
 * @param sortBy (optional) Field name for sorting in DB.
 * @param sortOrder (optional) Sort direction. Ascending or Descending.
 */
export function setSearchData(queryClient: QueryClient, updater: (data: Types.PagedResultOfProductListItemDto | undefined) => Types.PagedResultOfProductListItemDto, search?: string | null | undefined, productType?: Types.ProductType | null | undefined, lastStockUpdatedAt?: Date | null | undefined, offset?: number | null | undefined, limit?: number | null | undefined, sortBy?: string | null | undefined, sortOrder?: Types.SortOrder | undefined) {
  queryClient.setQueryData(searchQueryKey(search, productType, lastStockUpdatedAt, offset, limit, sortBy, sortOrder),
    updater
  );
}

/**
 * @param search (optional) 
 * @param productType (optional) 
 * @param lastStockUpdatedAt (optional) 
 * @param offset (optional) Offset of list.
 * @param limit (optional) Number of requested records.
 * @param sortBy (optional) Field name for sorting in DB.
 * @param sortOrder (optional) Sort direction. Ascending or Descending.
 */
export function setSearchDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.PagedResultOfProductListItemDto | undefined) => Types.PagedResultOfProductListItemDto) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function patchUrl(id: number): string {
  let url_ = getBaseUrl() + "/api/products/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function patchMutationKey(id: number): MutationKey {
  return trimArrayEnd([
      'ProductClient',
      'patch',
      id as any,
    ]);
}

export function usePatchMutation<TContext>(id: number, options?: Omit<UseMutationOptions<Types.ProductDto, unknown, Types.PatchProductDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.ProductDto, unknown, Types.PatchProductDto, TContext> {
  const key = patchMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (dto: Types.PatchProductDto) => Client.patch(id, dto),
    mutationKey: key,
  });
}
  
type Patch__MutationParameters = PatchProductQueryParameters & {
  dto: Types.PatchProductDto;
}

export function usePatchMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.ProductDto, unknown, Patch__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: PatchProductQueryParameters}): UseMutationResult<Types.ProductDto, unknown, Patch__MutationParameters, TContext> {
  const key = patchMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Patch__MutationParameters) => Client.patch(data.id ?? options?.parameters?.id!, data.dto),
  mutationKey: key,
});
}
  
export function getUrl(id: number): string {
  let url_ = getBaseUrl() + "/api/products/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getDefaultOptions: Omit<UseQueryOptions<Types.ProductDto, unknown, Types.ProductDto>, 'queryKey'> = {
  queryFn: __get,
};
export function getGetDefaultOptions() {
  return getDefaultOptions;
};
export function setGetDefaultOptions(options: typeof getDefaultOptions) {
  getDefaultOptions = options;
}

export function getQueryKey(id: number): QueryKey;
export function getQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as GetProductQueryParameters;

    return trimArrayEnd([
        'ProductClient',
        'get',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'ProductClient',
        'get',
        ...params
      ]);
  }
}
function __get(context: QueryFunctionContext) {
  return Client.get(
      context.queryKey[2] as number    );
}

export function useGetQuery<TSelectData = Types.ProductDto, TError = unknown>(dto: GetProductQueryParameters, options?: Omit<UseQueryOptions<Types.ProductDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;

export function useGetQuery<TSelectData = Types.ProductDto, TError = unknown>(id: number, options?: Omit<UseQueryOptions<Types.ProductDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetQuery<TSelectData = Types.ProductDto, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.ProductDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as GetProductQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  if (axiosConfig) {
    options = options ?? { } as any;
    options!.meta = { ...options!.meta, axiosConfig };
  }

  return useQuery<Types.ProductDto, TError, TSelectData>({
    queryFn: __get,
    queryKey: getQueryKey(id),
    ...getDefaultOptions as unknown as Omit<UseQueryOptions<Types.ProductDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setGetData(queryClient: QueryClient, updater: (data: Types.ProductDto | undefined) => Types.ProductDto, id: number) {
  queryClient.setQueryData(getQueryKey(id),
    updater
  );
}

export function setGetDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.ProductDto | undefined) => Types.ProductDto) {
  queryClient.setQueryData(queryKey, updater);
}