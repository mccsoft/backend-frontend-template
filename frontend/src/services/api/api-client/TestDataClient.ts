//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client.types';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Demonstrates an error response.
 */
export function throwError(config?: AxiosRequestConfig | undefined): Promise<string> {
    let url_ = getBaseUrl() + "/error-test";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigThrowError,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigThrowError?.headers,
            "Accept": "application/json"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processThrowError(_response);
    });
}

function processThrowError(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initValidationProblemDetails(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
    
        result200 = resultData200;
    
        return Promise.resolve<string>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<string>(null as any);
}

/**
 * Sends a dummy email
 */
export function sendEmail(config?: AxiosRequestConfig | undefined): Promise<string> {
    let url_ = getBaseUrl() + "/send-email";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigSendEmail,
        ...config,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigSendEmail?.headers,
            "Accept": "application/json"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processSendEmail(_response);
    });
}

function processSendEmail(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initValidationProblemDetails(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
    
        result200 = resultData200;
    
        return Promise.resolve<string>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<string>(null as any);
}

/**
 * Try this in browser with language set to DE
 * @param a (optional) 
 */
export function formData(a?: number | undefined, config?: AxiosRequestConfig | undefined): Promise<string> {
    let url_ = getBaseUrl() + "/formdata";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = new FormData();
    if (a === null || a === undefined)
        throw new Error("The parameter 'a' cannot be null.");
    else
        content_.append("A", a.toString());

    let options_: AxiosRequestConfig = {
        ..._requestConfigFormData,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigFormData?.headers,
            "Accept": "application/json"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processFormData(_response);
    });
}

function processFormData(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initValidationProblemDetails(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
    
        result200 = resultData200;
    
        return Promise.resolve<string>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<string>(null as any);
}
let _requestConfigThrowError: Partial<AxiosRequestConfig> | null;
export function getThrowErrorRequestConfig() {
  return _requestConfigThrowError;
}
export function setThrowErrorRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigThrowError = value;
}
export function patchThrowErrorRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigThrowError = patch(_requestConfigThrowError ?? {});
}

let _requestConfigSendEmail: Partial<AxiosRequestConfig> | null;
export function getSendEmailRequestConfig() {
  return _requestConfigSendEmail;
}
export function setSendEmailRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigSendEmail = value;
}
export function patchSendEmailRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigSendEmail = patch(_requestConfigSendEmail ?? {});
}

let _requestConfigFormData: Partial<AxiosRequestConfig> | null;
export function getFormDataRequestConfig() {
  return _requestConfigFormData;
}
export function setFormDataRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigFormData = value;
}
export function patchFormDataRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigFormData = patch(_requestConfigFormData ?? {});
}