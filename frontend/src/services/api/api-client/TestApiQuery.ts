//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './TestApiClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';


export function resetTenantUrl(): string {
  let url_ = getBaseUrl() + "/api/test/tenant/reset";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function resetTenantMutationKey(): MutationKey {
  return trimArrayEnd([
      'TestApiClient',
      'resetTenant',
    ]);
}

/**
 * Resets tenant to a default state.
Resetting in practice is usually faster then creating new tenant
(in cases when creating  a tenant involves seeding the data).
            
Also resetting allows to reuse the browser session in UI Tests without re-login in every test.
 */
export function useResetTenantMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = resetTenantMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.resetTenant(),
    mutationKey: key,
  });
}
  
export function createTestTenantUrl(): string {
  let url_ = getBaseUrl() + "/api/test/tenant";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createTestTenantMutationKey(): MutationKey {
  return trimArrayEnd([
      'TestApiClient',
      'createTestTenant',
    ]);
}

/**
 * Creates a test tenant to be used in UI Tests
 */
export function useCreateTestTenantMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, Types.CreateTestTenantDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.CreateTestTenantDto, TContext> {
  const key = createTestTenantMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (dto: Types.CreateTestTenantDto) => Client.createTestTenant(dto),
    mutationKey: key,
  });
}