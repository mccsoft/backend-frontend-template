//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './UserClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';



export function getCurrentUserInfoUrl(): string {
  let url_ = getBaseUrl() + "/api/users/me";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getCurrentUserInfoDefaultOptions: Omit<UseQueryOptions<Types.CurrentUserDto, unknown, Types.CurrentUserDto>, 'queryKey'> = {
  queryFn: __getCurrentUserInfo,
};
export function getGetCurrentUserInfoDefaultOptions() {
  return getCurrentUserInfoDefaultOptions;
};
export function setGetCurrentUserInfoDefaultOptions(options: typeof getCurrentUserInfoDefaultOptions) {
  getCurrentUserInfoDefaultOptions = options;
}

export function getCurrentUserInfoQueryKey(): QueryKey;
export function getCurrentUserInfoQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'UserClient',
      'getCurrentUserInfo',
    ]);
}
function __getCurrentUserInfo() {
  return Client.getCurrentUserInfo(
    );
}

/**
 * Gets permissions for the current user
 */
export function useGetCurrentUserInfoQuery<TSelectData = Types.CurrentUserDto, TError = unknown>(options?: Omit<UseQueryOptions<Types.CurrentUserDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetCurrentUserInfoQuery<TSelectData = Types.CurrentUserDto, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.CurrentUserDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  if (axiosConfig) {
    options = options ?? { } as any;
    options!.meta = { ...options!.meta, axiosConfig };
  }

  return useQuery<Types.CurrentUserDto, TError, TSelectData>({
    queryFn: __getCurrentUserInfo,
    queryKey: getCurrentUserInfoQueryKey(),
    ...getCurrentUserInfoDefaultOptions as unknown as Omit<UseQueryOptions<Types.CurrentUserDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Gets permissions for the current user
 */
export function setGetCurrentUserInfoData(queryClient: QueryClient, updater: (data: Types.CurrentUserDto | undefined) => Types.CurrentUserDto, ) {
  queryClient.setQueryData(getCurrentUserInfoQueryKey(),
    updater
  );
}

/**
 * Gets permissions for the current user
 */
export function setGetCurrentUserInfoDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.CurrentUserDto | undefined) => Types.CurrentUserDto) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function resetPasswordUrl(): string {
  let url_ = getBaseUrl() + "/api/users/reset-password";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function resetPasswordMutationKey(): MutationKey {
  return trimArrayEnd([
      'UserClient',
      'resetPassword',
    ]);
}

/**
 * Allows user to reset their password using single-use password reset token issued by the backend.
 */
export function useResetPasswordMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, Types.ResetPasswordDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.ResetPasswordDto, TContext> {
  const key = resetPasswordMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (dto: Types.ResetPasswordDto) => Client.resetPassword(dto),
    mutationKey: key,
  });
}
  
export function changePasswordUrl(): string {
  let url_ = getBaseUrl() + "/api/users/password";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function changePasswordMutationKey(): MutationKey {
  return trimArrayEnd([
      'UserClient',
      'changePassword',
    ]);
}

/**
 * Changes password by a user.
 * @param dto The dto contains old and new passwords.
 */
export function useChangePasswordMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, Types.ChangePasswordDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.ChangePasswordDto, TContext> {
  const key = changePasswordMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (dto: Types.ChangePasswordDto) => Client.changePassword(dto),
    mutationKey: key,
  });
}