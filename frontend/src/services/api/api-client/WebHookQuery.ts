//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './WebHookClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';


export type UpdateSubscriptionWebHookQueryParameters = {
  id: string ;
}

export type UnsubscribeWebHookQueryParameters = {
  subscriptionId?: string | undefined ;
}

export function getSubscriptionsUrl(): string {
  let url_ = getBaseUrl() + "/api/webhooks/subscriptions";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getSubscriptionsDefaultOptions: Omit<UseQueryOptions<Types.WebhookSubscriptionDto[], unknown, Types.WebhookSubscriptionDto[]>, 'queryKey'> = {
  queryFn: __getSubscriptions,
};
export function getGetSubscriptionsDefaultOptions() {
  return getSubscriptionsDefaultOptions;
};
export function setGetSubscriptionsDefaultOptions(options: typeof getSubscriptionsDefaultOptions) {
  getSubscriptionsDefaultOptions = options;
}

export function getSubscriptionsQueryKey(): QueryKey;
export function getSubscriptionsQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'WebHookClient',
      'getSubscriptions',
    ]);
}
function __getSubscriptions() {
  return Client.getSubscriptions(
    );
}

/**
 * Returns list of configured Webhooks
 */
export function useGetSubscriptionsQuery<TSelectData = Types.WebhookSubscriptionDto[], TError = unknown>(options?: Omit<UseQueryOptions<Types.WebhookSubscriptionDto[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetSubscriptionsQuery<TSelectData = Types.WebhookSubscriptionDto[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.WebhookSubscriptionDto[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  if (axiosConfig) {
    options = options ?? { } as any;
    options!.meta = { ...options!.meta, axiosConfig };
  }

  return useQuery<Types.WebhookSubscriptionDto[], TError, TSelectData>({
    queryFn: __getSubscriptions,
    queryKey: getSubscriptionsQueryKey(),
    ...getSubscriptionsDefaultOptions as unknown as Omit<UseQueryOptions<Types.WebhookSubscriptionDto[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Returns list of configured Webhooks
 */
export function setGetSubscriptionsData(queryClient: QueryClient, updater: (data: Types.WebhookSubscriptionDto[] | undefined) => Types.WebhookSubscriptionDto[], ) {
  queryClient.setQueryData(getSubscriptionsQueryKey(),
    updater
  );
}

/**
 * Returns list of configured Webhooks
 */
export function setGetSubscriptionsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.WebhookSubscriptionDto[] | undefined) => Types.WebhookSubscriptionDto[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function subscribeToEventUrl(): string {
  let url_ = getBaseUrl() + "/api/webhooks/subscriptions/subscribe";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function subscribeToEventMutationKey(): MutationKey {
  return trimArrayEnd([
      'WebHookClient',
      'subscribeToEvent',
    ]);
}

/**
 * Subscribes to a new webhook event.
 * @param dto The subscription request containing event type and target URL.
 * @return Subscription created successfully.
 */
export function useSubscribeToEventMutation<TContext>(options?: Omit<UseMutationOptions<Types.WebhookSubscriptionDto, unknown, Types.CreateWebHookDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.WebhookSubscriptionDto, unknown, Types.CreateWebHookDto, TContext> {
  const key = subscribeToEventMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (dto: Types.CreateWebHookDto) => Client.subscribeToEvent(dto),
    mutationKey: key,
  });
}
  
export function updateSubscriptionUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/webhooks/subscriptions/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateSubscriptionMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'WebHookClient',
      'updateSubscription',
      id as any,
    ]);
}

/**
 * Updates an existing webhook subscription.
 * @param id The ID of the subscription to update.
 * @param dto The updated subscription data.
 * @return Subscription updated successfully.
 */
export function useUpdateSubscriptionMutation<TContext>(id: string, options?: Omit<UseMutationOptions<Types.WebhookSubscriptionDto, unknown, Types.UpdateWebHookSubscriptionDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.WebhookSubscriptionDto, unknown, Types.UpdateWebHookSubscriptionDto, TContext> {
  const key = updateSubscriptionMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (dto: Types.UpdateWebHookSubscriptionDto) => Client.updateSubscription(id, dto),
    mutationKey: key,
  });
}
  
type UpdateSubscription__MutationParameters = UpdateSubscriptionWebHookQueryParameters & {
  dto: Types.UpdateWebHookSubscriptionDto;
}

/**
 * Updates an existing webhook subscription.
 * @param id The ID of the subscription to update.
 * @param dto The updated subscription data.
 * @return Subscription updated successfully.
 */
export function useUpdateSubscriptionMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.WebhookSubscriptionDto, unknown, UpdateSubscription__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateSubscriptionWebHookQueryParameters}): UseMutationResult<Types.WebhookSubscriptionDto, unknown, UpdateSubscription__MutationParameters, TContext> {
  const key = updateSubscriptionMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: UpdateSubscription__MutationParameters) => Client.updateSubscription(data.id ?? options?.parameters?.id!, data.dto),
  mutationKey: key,
});
}
  
export function unsubscribeUrl(subscriptionId?: string | undefined): string {
  let url_ = getBaseUrl() + "/api/webhooks/subscriptions/unsubscribe?";
if (subscriptionId === null)
    throw new Error("The parameter 'subscriptionId' cannot be null.");
else if (subscriptionId !== undefined)
    url_ += "subscriptionId=" + encodeURIComponent("" + subscriptionId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function unsubscribeMutationKey(subscriptionId?: string | undefined): MutationKey {
  return trimArrayEnd([
      'WebHookClient',
      'unsubscribe',
      subscriptionId as any,
    ]);
}

/**
 * Unsubscribes from a webhook event.
 * @param subscriptionId (optional) The ID of the subscription to remove.
 * @return Unsubscribed successfully.
 */
export function useUnsubscribeMutation<TContext>(subscriptionId?: string | undefined, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = unsubscribeMutationKey(subscriptionId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.unsubscribe(subscriptionId),
    mutationKey: key,
  });
}
  
type Unsubscribe__MutationParameters = UnsubscribeWebHookQueryParameters

/**
 * Unsubscribes from a webhook event.
 * @param subscriptionId (optional) The ID of the subscription to remove.
 * @return Unsubscribed successfully.
 */
export function useUnsubscribeMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, Unsubscribe__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UnsubscribeWebHookQueryParameters}): UseMutationResult<void, unknown, Unsubscribe__MutationParameters, TContext> {
  const key = unsubscribeMutationKey(options?.parameters?.subscriptionId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Unsubscribe__MutationParameters) => Client.unsubscribe(data.subscriptionId ?? options?.parameters?.subscriptionId!),
  mutationKey: key,
});
}