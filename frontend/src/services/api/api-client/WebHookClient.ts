//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client.types';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Returns list of configured Webhooks
 */
export function getSubscriptions(config?: AxiosRequestConfig | undefined): Promise<Types.WebhookSubscriptionDto[]> {
    let url_ = getBaseUrl() + "/api/webhooks/subscriptions";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetSubscriptions,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetSubscriptions?.headers,
            "Accept": "application/json"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetSubscriptions(_response);
    });
}

function processGetSubscriptions(response: AxiosResponse): Promise<Types.WebhookSubscriptionDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initValidationProblemDetails(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        if (Array.isArray(resultData200)) {
              result200 = resultData200.map(item => 
                Types.initWebhookSubscriptionDto(item)
              );
            }
        return Promise.resolve<Types.WebhookSubscriptionDto[]>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.WebhookSubscriptionDto[]>(null as any);
}

/**
 * Subscribes to a new webhook event.
 * @param dto The subscription request containing event type and target URL.
 * @return Subscription created successfully.
 */
export function subscribeToEvent(dto: Types.CreateWebHookDto, config?: AxiosRequestConfig | undefined): Promise<Types.WebhookSubscriptionDto> {
    let url_ = getBaseUrl() + "/api/webhooks/subscriptions/subscribe";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeCreateWebHookDto(dto);

    let options_: AxiosRequestConfig = {
        ..._requestConfigSubscribeToEvent,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigSubscribeToEvent?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processSubscribeToEvent(_response);
    });
}

function processSubscribeToEvent(response: AxiosResponse): Promise<Types.WebhookSubscriptionDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initValidationProblemDetails(resultData400);
        return throwException("Invalid subscription data.", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initWebhookSubscriptionDto(resultData200);
        return Promise.resolve<Types.WebhookSubscriptionDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.WebhookSubscriptionDto>(null as any);
}

/**
 * Updates an existing webhook subscription.
 * @param id The ID of the subscription to update.
 * @param dto The updated subscription data.
 * @return Subscription updated successfully.
 */
export function updateSubscription(id: string, dto: Types.UpdateWebHookSubscriptionDto, config?: AxiosRequestConfig | undefined): Promise<Types.WebhookSubscriptionDto> {
    let url_ = getBaseUrl() + "/api/webhooks/subscriptions/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeUpdateWebHookSubscriptionDto(dto);

    let options_: AxiosRequestConfig = {
        ..._requestConfigUpdateSubscription,
        ...config,
        data: content_,
        method: "PATCH",
        url: url_,
        headers: {
            ..._requestConfigUpdateSubscription?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processUpdateSubscription(_response);
    });
}

function processUpdateSubscription(response: AxiosResponse): Promise<Types.WebhookSubscriptionDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initValidationProblemDetails(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initWebhookSubscriptionDto(resultData200);
        return Promise.resolve<Types.WebhookSubscriptionDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.WebhookSubscriptionDto>(null as any);
}

/**
 * Unsubscribes from a webhook event.
 * @param subscriptionId (optional) The ID of the subscription to remove.
 * @return Unsubscribed successfully.
 */
export function unsubscribe(subscriptionId?: string | undefined, config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/webhooks/subscriptions/unsubscribe?";
    if (subscriptionId === null)
        throw new Error("The parameter 'subscriptionId' cannot be null.");
    else if (subscriptionId !== undefined)
        url_ += "subscriptionId=" + encodeURIComponent("" + subscriptionId) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigUnsubscribe,
        ...config,
        method: "DELETE",
        url: url_,
        headers: {
            ..._requestConfigUnsubscribe?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processUnsubscribe(_response);
    });
}

function processUnsubscribe(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initValidationProblemDetails(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}
let _requestConfigGetSubscriptions: Partial<AxiosRequestConfig> | null;
export function getGetSubscriptionsRequestConfig() {
  return _requestConfigGetSubscriptions;
}
export function setGetSubscriptionsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetSubscriptions = value;
}
export function patchGetSubscriptionsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetSubscriptions = patch(_requestConfigGetSubscriptions ?? {});
}

let _requestConfigSubscribeToEvent: Partial<AxiosRequestConfig> | null;
export function getSubscribeToEventRequestConfig() {
  return _requestConfigSubscribeToEvent;
}
export function setSubscribeToEventRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigSubscribeToEvent = value;
}
export function patchSubscribeToEventRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigSubscribeToEvent = patch(_requestConfigSubscribeToEvent ?? {});
}

let _requestConfigUpdateSubscription: Partial<AxiosRequestConfig> | null;
export function getUpdateSubscriptionRequestConfig() {
  return _requestConfigUpdateSubscription;
}
export function setUpdateSubscriptionRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigUpdateSubscription = value;
}
export function patchUpdateSubscriptionRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigUpdateSubscription = patch(_requestConfigUpdateSubscription ?? {});
}

let _requestConfigUnsubscribe: Partial<AxiosRequestConfig> | null;
export function getUnsubscribeRequestConfig() {
  return _requestConfigUnsubscribe;
}
export function setUnsubscribeRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigUnsubscribe = value;
}
export function patchUnsubscribeRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigUnsubscribe = patch(_requestConfigUnsubscribe ?? {});
}