trigger:
  branches:
    include:
      - master
      - main
  paths:
    exclude:
      - docs/*

variables:
  BUILD_NUMBER: 0.1.$(Build.BuildId)
  REACT_APP_BUILD_NUMBER: 0.1.$(Build.BuildId)
  solution: 'webapi/MccSoft.TemplateApp.sln'
  project: 'webapi/src/MccSoft.TemplateApp.App/MccSoft.TemplateApp.App.csproj'

stages:
  - stage: Build
    jobs:
      - job: Build_Backend_Frontend
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - checkout: self
            fetchDepth: 1
            submodules: true

          - template: ./azure-pipelines-tests-shared.yml

          - script: |
              yarn json -f package.json -I -e 'this.version="$(BUILD_NUMBER)"'
              yarn json -f frontend/package.json -I -e 'this.version="$(BUILD_NUMBER)"'
              yarn --version

              # `set version` step should go after `yarn install`, since it uses `json` package which should be installed
              # we do not use `yarn version` plugin, because it doesn't play well with shallow clone (https://yarnpkg.com/features/release-workflow#commit-history)
            displayName: 'set version'

          - script: |
              yarn copy-translations-to-backend
            displayName: 'copy translations to backend'

          - script: |
              yarn build-frontend
            displayName: 'build frontend'

          - script: |
              yarn build-dotnet
            displayName: 'build backend'

          - script: |
              yarn copy-frontend
            displayName: 'copy frontend to backend'

          - template: ./build-import-meta-env.yml

          #          - script: |
          #              mkdir ./cobertura
          #              find '$(Agent.TempDirectory)' -name 'coverage.cobertura.xml' -exec cp --backup=numbered -t ./cobertura {} +
          #              cd ./cobertura
          #              for f in *~*~; do mv "$f" "$(echo "$f" | sed -r 's/(.*)\.~([0-9]+)~/\2\1/')"; done;
          #            displayName: 'copy coverage files'

          #          - script: |
          #              cd ./webapi
          #              dotnet tool restore
          #              dotnet reportgenerator -reports:../cobertura/* -targetdir:../cobertura/report -sourcedirs:./ -assemblyfilters:+Lmt.Unicorn.App\;+Lmt.Unicorn.Common\;+Lmt.Unicorn.Domain
          #            displayName: 'generate coverage report'

          #          - publish: './cobertura'
          #            artifact: 'backend-coverage'

          #          - task: PublishTestResults@2
          #            inputs:
          #              testResultsFormat: 'JUnit'
          #              testResultsFiles: '**/junit.xml'
          #              mergeTestResults: true

          - script: |
              docker login $(DOCKER_REGISTRY) -u $(DOCKER_USER) -p $(DOCKER_TOKEN)
            displayName: 'Authenticate at Container Registry'

          - task: Docker@2
            condition: succeeded()
            inputs:
              repository: $(DOCKER_REGISTRY)
              command: 'buildAndPush'
              Dockerfile: 'publish/Dockerfile'
              buildContext: '$(Build.SourcesDirectory)/publish'
              ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
                tags: |
                  $(BUILD_NUMBER)
                  latest
              ${{ else }}:
                tags: |
                  $(BUILD_NUMBER)
            displayName: 'build and push docker image'

          - publish: './publish'
            artifact: 'publish'

          - publish: './docker-compose.yaml'
            artifact: 'docker-compose'

          - publish: './nginx'
            artifact: 'nginx'

          - publish: './scripts/deploy'
            artifact: 'scripts'

  - stage: DeployToDev
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment:
        environment:
          name: 'DEV'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ./azure-deploy-template.yml

  - stage: TagDevSources
    dependsOn: DeployToDev
    condition: succeeded()
    jobs:
      - job:
        condition: succeeded()
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            persistCredentials: true
          - script: |
              git tag 'dev' -f
              git push origin 'dev' -f --tags

  - stage: DeployToProd
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment:
        environment:
          name: 'PROD'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ./azure-deploy-template.yml

  - stage: TagProdSources
    dependsOn: DeployToProd
    condition: succeeded()
    jobs:
      - job:
        condition: succeeded()
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            persistCredentials: true
          - script: |
              git tag 'prod' -f
              git push origin 'prod' -f --tags
